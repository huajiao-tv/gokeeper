// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: discovery.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Instance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ServiceName

	// no validation rules for Zone

	// no validation rules for Env

	// no validation rules for Hostname

	// no validation rules for Addrs

	// no validation rules for Metadata

	// no validation rules for RegTime

	// no validation rules for UpdateTime

	return nil
}

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on ZoneGroup with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ZoneGroup) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ZoneGroup

	return nil
}

// ZoneGroupValidationError is the validation error returned by
// ZoneGroup.Validate if the designated constraints aren't met.
type ZoneGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoneGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoneGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoneGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoneGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoneGroupValidationError) ErrorName() string { return "ZoneGroupValidationError" }

// Error satisfies the builtin error interface
func (e ZoneGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZoneGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoneGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoneGroupValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceName

	// no validation rules for Instances

	// no validation rules for Metadata

	// no validation rules for UpdateTime

	// no validation rules for Version

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterReqValidationError{
				field:  "Instance",
				reason: "集成message非法",
				cause:  err,
			}
		}
	}

	// no validation rules for LeaseSecond

	return nil
}

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on KeepAliveReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KeepAliveReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KeepAliveReqValidationError{
				field:  "Instance",
				reason: "集成message非法",
				cause:  err,
			}
		}
	}

	// no validation rules for LeaseSecond

	return nil
}

// KeepAliveReqValidationError is the validation error returned by
// KeepAliveReq.Validate if the designated constraints aren't met.
type KeepAliveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeepAliveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeepAliveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeepAliveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeepAliveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeepAliveReqValidationError) ErrorName() string { return "KeepAliveReqValidationError" }

// Error satisfies the builtin error interface
func (e KeepAliveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeepAliveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeepAliveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeepAliveReqValidationError{}

// Validate checks the field values on DeregisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeregisterReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeregisterReqValidationError{
				field:  "Instance",
				reason: "集成message非法",
				cause:  err,
			}
		}
	}

	return nil
}

// DeregisterReqValidationError is the validation error returned by
// DeregisterReq.Validate if the designated constraints aren't met.
type DeregisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterReqValidationError) ErrorName() string { return "DeregisterReqValidationError" }

// Error satisfies the builtin error interface
func (e DeregisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterReqValidationError{}

// Validate checks the field values on PollsReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PollsReq) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPollServices()) < 1 {
		return PollsReqValidationError{
			field:  "PollServices",
			reason: "必须至少包含 1 键值对",
		}
	}

	// no validation rules for Env

	// no validation rules for Subscriber

	return nil
}

// PollsReqValidationError is the validation error returned by
// PollsReq.Validate if the designated constraints aren't met.
type PollsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollsReqValidationError) ErrorName() string { return "PollsReqValidationError" }

// Error satisfies the builtin error interface
func (e PollsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollsReqValidationError{}

// Validate checks the field values on PollsResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PollsResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventType

	// no validation rules for Services

	return nil
}

// PollsRespValidationError is the validation error returned by
// PollsResp.Validate if the designated constraints aren't met.
type PollsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollsRespValidationError) ErrorName() string { return "PollsRespValidationError" }

// Error satisfies the builtin error interface
func (e PollsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollsRespValidationError{}
