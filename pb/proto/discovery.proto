syntax = "proto3";

package keeper;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option deprecated = true;
option optimize_for = SPEED;
option go_package = "pb";
option objc_class_prefix = "CPB";
option java_multiple_files = true;
option java_package = "com.service.keeper";
option java_outer_classname = "DiscoveryProto";

//实例信息,可参考Instance结构体
message Instance {
    //实例id
    string id = 1;
    //服务名称
    string service_name = 2;
    //机房，bjcc/bjyt/bjdt
    string zone = 3;
    //环境，prod(线上)/pre(预发布)/test(测试)/dev(开发)
    string env = 4;
    //机器地址
    string hostname = 5;
    //地址 scheme -> address  例如： http -> 127.0.0.1:8080、grpc -> 127.0.0.1:8081
    map<string, string> addrs = 6;
	//元组数据，例如weight权重信息
    map<string, string> metadata = 7;
	//注册时间
    int64 reg_time = 8;
    //更新时间
    int64 update_time = 9;
}

//实例群组
message ZoneGroup {
    //实例群组
    map<string,Instance> zone_group = 1;
}

//服务信息，可参考Service结构体
message Service {
    //服务名称，project.service[.sub_service],例如live.session
    string service_name = 1;
    //实例信息，根据zone（机房）进行分组
    map<string, ZoneGroup> instances = 2;
	//元组数据，用于扩展
    map<string, string> metadata = 3;
	//service更新时间
    int64 update_time = 4;
	//service版本
    int64 version = 5;
}

//服务注册请求体
message RegisterReq {
    //实例信息
    Instance instance = 1;
    //实例续约时间，单位秒
    int64 lease_second = 2;
}

//服务周期续约请求体
message KeepAliveReq {
    //实例信息
    Instance instance = 1;
    //实例续约时间，单位秒
    int64 lease_second = 2;
}

//服务解除注册请求体
message DeregisterReq {
    //实例信息
    Instance instance = 1;
}

//批量获取服务节点的请求体
message PollsReq {
    //服务信息 service_name -> version
    map<string, int64> poll_services = 1 [(validate.rules).map.min_pairs = 1];
    //环境
    string env = 2;
    //订阅者
    string subscriber = 3;
}

//服务发现列表事件
enum DiscoveryEventType {
    // type
    _DISCOVERY_EVENT_TYPE_ = 0;
    //服务列表未更新
    DISCOVERY_EVENT_NONE = 1;
    //服务列表更新
    DISCOVERY_EVENT_UPDATE = 2;
}

//批量获取服务节点的返回体，方便后续扩展字段，单独声明一个结构体
message PollsResp {
    //服务发现事件类型
    DiscoveryEventType event_type = 1;
    //服务信息，service_name -> service
    map<string,Service> services = 2;
}

//keeper 服务发现的相关接口
service Discovery {
    //服务注册接口,服务就绪后调用
    rpc Register (RegisterReq) returns (google.protobuf.Empty) {}

    //服务心跳接口
    rpc KeepAlive(KeepAliveReq) returns (google.protobuf.Empty) {}

    //服务解除注册接口，服务下线时调用
    rpc Deregister (DeregisterReq) returns (google.protobuf.Empty) {}

    //批量获取服务的节点信息,如果没有相关数据更新，则阻塞一段时间
    rpc Polls(stream PollsReq) returns (stream PollsResp) {}
}